@model LoginModel
@using SmartStore.Web.Models.Customer;
@using SmartStore.Core;
@using SmartStore.Core.Infrastructure;
@{
	Layout = "_Layout";

	Html.AddTitleParts(T("PageTitle.Login").Text);

	var registerUrl = Url.RouteUrl("Register");
	if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
	{
		var webHelper = EngineContext.Current.Resolve<IWebHelper>();
		registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
	}
}
<!-- Page info section -->
<div class="whitebg">
	<div class="pagewidth">
		<div class="container" style="flex-wrap: wrap; align-content: center; width: 500px; border: 1px solid #c3c3c3;background:#fff;">
			<div class="page login-page">
				<div class="mt-4">
					<div style="background:#fff;">
						<div class="card card-shadow p-5 mb-5 mb-md-0 login-box">
							<h3 class="h4 mb-0" style="color:#000">
								Login
							</h3>
							@if (!ViewData.ModelState.IsValid)
							{
								@Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text, new { @class = "alert alert-danger" })
							}
							<!-- SignIn Form -->
							<form action="@ViewContext.HttpContext.Request.RawUrl" method="post">
								@if (Model.UsernamesEnabled)
								{
									<div class="form-group">
										<div class="input-group-lg has-icon">
											@Html.TextBoxFor(m => m.Username, new { @class = "username form-control", placeholder = Html.DisplayNameFor(m => m.Username) })
											<span class="input-group-icon text-muted">
												<i class="icm icm-user"></i>
											</span>
										</div>
										@Html.ValidationMessageFor(m => m.Username)
									</div>
								}
								else
								{
									<div class="form-group">
										<div class="input-group-lg has-icon">
											@Html.TextBoxFor(m => m.Email, new { @class = "email form-control",@style = "color:#000", type = "email", placeholder = Html.DisplayNameFor(m => m.Email) })
											<span class="input-group-icon text-muted">
												<i class="icm icm-envelope-open"></i>
											</span>
										</div>
										@Html.ValidationMessageFor(m => m.Email)
									</div>
								}
								<div class="form-group">
									<div class="input-group-lg has-icon">
										<input type="password" class="password form-control"
											   autocomplete="off"
											   style="color:#000"
											   placeholder="Password"
											   id="@Html.FieldIdFor(m => m.Password)"
											   name="@Html.FieldNameFor(m => m.Password)"
											   value="@(Model.Password.HasValue() ? Model.Password : null)" />
										<span class="input-group-icon text-muted">
											<i class="icm icm-shield"></i>
										</span>
									</div>
									@Html.ValidationMessageFor(m => m.Password)
								</div>
								<div class="form-group">
									<button type="submit" class="btn btn-primary btn-lg btn-block btn-login">
										@T("Account.Login.LoginButton")
									</button>
								</div>
							</form>
						</div>
					</div>
					
				</div>
			</div>
		</div>
	</div>
</div>
